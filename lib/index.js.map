{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["\r\nimport { readSync } from 'read-text-file'\r\n\r\nfunction getType(type){\r\n    if(type == \"Numbers\")\r\n        return \"Number\"\r\n    if(type == \"Table\")\r\n        return \"any\"\r\n    return type;\r\n}\r\n\r\nfunction createInterfaceFromPath(path: string){\r\n    let index = path + \"index.markdown\"\r\n    console.log(path)\r\n    const indexText = readSync(index)\r\n\r\n    let details: Record<string, any> = {}\r\n\r\n    details.name = /# (.+)/.exec(indexText)?.[1]\r\n    details.parent = /> __Parent__ +?\\[(.+)\\]\\[/.exec(indexText)?.[1]\r\n    details.overview = /## Overview.+?#/s.exec(indexText)?.[0].replace(\"## Overview\", \"\").replace(\"#\", \"\").trim()\r\n    let properties = indexText.match(/#### \\[[^\\]]+?\\.([^\\]]+?)\\]/g)?.map(x=>/.+?\\.(.+?)\\]/.exec(x)?.[1]) || []  as  string[]  \r\n    //console.log(properties)\r\n    details.properties = [];\r\n    for(const prop of properties){\r\n        \r\n        let propPath = path + prop?.replace(\"_\", \"\") + \".markdown\"\r\n        const propText = readSync(propPath)\r\n        const type = /> __Type__ +?\\[(.+)\\]\\[/.exec(propText)?.[1]\r\n        const overview = /## Overview.+?#/s.exec(propText)?.[0].replace(\"## Overview\", \"\").replace(\"#\", \"\").trim()\r\n        details.properties.push({type, name: prop, overview})\r\n    }\r\n    let functions = indexText.match(/#### \\[.+?\\:(.+?)\\]/g)?.map(x=>/.+?:(.+?)\\(\\)\\]/.exec(x)?.[1]) || [] as  string[] \r\n    //console.log(functions)\r\n    details.functions = [];\r\n\r\n    for(const func of functions){\r\n        let funcPath = path  + func + \".markdown\"\r\n        \r\n        console.log(funcPath)\r\n        const funcText = readSync(funcPath)\r\n        const returnType = /> __Return value__ +?\\[(.+)\\]\\[/.exec(funcText)?.[1]\r\n        const overview = /## Overview.+?#/s.exec(funcText)?.[0].replace(\"## Overview\", \"\").replace(\"#\", \"\").trim()\r\n        const validArgs: any = [];\r\n        let parameterSets = funcText.match(new RegExp(`(\\t|    )object:${func}\\(.+\\)`, \"g\")) || [] as string[]\r\n        \r\n        for(const parameters of parameterSets){\r\n            \r\n            const params = /\\(.+\\)/.exec(parameters)?.[0].replace(\"(\", \"\").replace(\")\", \"\").split(\",\").map(x=>x.trim())  || [] as string[] \r\n            const argSet: any = [];\r\n            for(const param of params){\r\n                console.log(param)\r\n                const getType = new RegExp(`#####.+${param}.+\\n_\\\\[(.+?)\\\\]`)\r\n                const type = getType.exec(funcText)?.[1]\r\n                argSet.push({type: type, name: param})\r\n            }\r\n            validArgs.push(argSet)\r\n        }\r\n\r\n\r\n        details.functions.push({return: returnType, name: func, validArgs, overview})\r\n    }\r\n\r\n    let output = `interface ${details.name} `\r\n    if(details.parent && ![\"Userdata\"].includes(details.parent)) {\r\n        output += `extends ${details.parent} {\\n`\r\n    } else {\r\n        output += `{\\n`\r\n    }\r\n\r\n    for(const prop of details.properties){\r\n        output += `\\/** ${prop.overview} *\\/\\n${prop.name}?: ${getType(prop.type)};\\n`\r\n    }\r\n\r\n    for(const func of details.functions){\r\n        output += `\\/** ${func.overview} *\\/\\n`\r\n        for(const paramSet of func.validArgs){\r\n            output += `${func.name}(${paramSet.map(x=>`${x.name}: ${getType(x.type)}`).join(\", \")}): ${getType(func.return || \"void\")};\\n`\r\n        }\r\n    }\r\n\r\n    output += \"}\"\r\n    return output\r\n}\r\n\r\n\r\nimport { readSync as readSyncDir, INCLUDE_DIRECTORIES } from 'readdir';\r\n \r\nconst allTextFilesFilter = ['*/'];\r\nconst options = INCLUDE_DIRECTORIES;\r\nconst contents = readSyncDir('./docs/type/', allTextFilesFilter, options);\r\nconst outputs: string[] = []\r\nfor(const dir of contents){\r\n    let path = \"./docs/type/\" + dir\r\n    outputs.push(`// ***${dir}***\\n\\n` + createInterfaceFromPath(path));\r\n}\r\n//console.log(contents)\r\nimport write from 'write';\r\nwrite.sync('foo.d.ts', outputs.join(`\\n\\n\\n`), { overwrite: true }); \r\n// let path = \"./docs/type/Paint\"\r\n// console.log(createInterfaceFromPath(path))\r\n\r\n"],
  "mappings": "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",
  "names": ["import_read_text_file", "import_readdir", "import_write", "getType", "type", "createInterfaceFromPath", "path", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "index", "indexText", "details", "properties", "x", "prop", "propPath", "propText", "overview", "functions", "func", "funcPath", "funcText", "returnType", "validArgs", "parameterSets", "parameters", "params", "argSet", "param", "output", "paramSet", "allTextFilesFilter", "options", "contents", "readSyncDir", "outputs", "dir", "write"]
}
